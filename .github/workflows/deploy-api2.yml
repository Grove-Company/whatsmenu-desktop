name: Deploy API 2 to EC2

on:
  push:
    branches:
      - beta

  pull_request:
    types: [closed]
    branches:
      - main

    paths:
      - "apps/api/v2/**"

env:
  BRANCH: ${{ github.ref_name }}

jobs:
  package:
    if: github.ref_name == 'beta' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    outputs:
      ec2_deploy_hosts: ${{ steps.set_output.outputs.ec2_deploy_hosts }}
    steps:
      - name: Set EC2 Deploy Hosts
        id: set_output
        run: |
          if [ "${{ env.BRANCH }}" == "beta" ]; then
            echo "::set-output name=ec2_deploy_hosts::${{ vars.EC2_DEPLOY_HOSTS_1}}"
          else
            echo "::set-output name=ec2_deploy_hosts::${{ vars.EC2_DEPLOY_HOSTS}}"
          fi

      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "10"

      - name: Install dependencies
        run: npm install

      - name: Package application
        run: |
          sudo tar -czf deploy.tar.gz ./apps/api/v2
      
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: deploy-package
          path: deploy.tar.gz

  deploy:
    needs: package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ec2_host: ${{ fromJson(needs.package.outputs.ec2_deploy_hosts) }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: deploy-package

      - name: Deploy to EC2 ${{ env.BRANCH }}
        env:
          EC2_USER: ${{ vars.EC2_USER_1 }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
          PROJECT_PATH: ${{ env.BRANCH == 'beta' && vars.API2_BETA_PATH || vars.API2_PROD_PATH }}
          ENV_PATH: ${{ env.BRANCH == 'beta' && vars.API2_BETA_ENV_HOST || vars.API2_PROD_ENV_HOST }}
        run: |
          echo "$EC2_KEY" > private_key.pem
          chmod 600 private_key.pem

          mkdir -p ~/.ssh

          ssh-keyscan -H ${{ matrix.ec2_host }} >> ~/.ssh/known_hosts

          scp -i private_key.pem deploy.tar.gz $EC2_USER@${{ matrix.ec2_host }}:$PROJECT_PATH/public_html

          ssh -i private_key.pem $EC2_USER@${{ matrix.ec2_host }} << 'EOF'
            cd ${{ env.PROJECT_PATH }}
            ls -la
            find /public_html ! -name 'deploy.tar.gz' -type f -exec rm -f {} +
            find /public_html ! -name 'deploy.tar.gz' -type d -exec rm -rf {} +
            cd public_html
            tar -xzf deploy.tar.gz
            mv apps/api/v2/* .
            rm -rf apps
            rm deploy.tar.gz
            scp ${{ secrets.EC2_ENV_HOST }}:$ENV_PATH .env
            pm2 start server.js
          EOF

          rm private_key.pem
