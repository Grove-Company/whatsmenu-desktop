name: Deploy API 3 to EC2

on:
  push:
    branches:
      - beta
    paths:
      - "apps/api/v3/**"
      - ".github/workflows/deploy-api3.yml"

  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - "apps/api/v3/**"
      - ".github/workflows/deploy-api3.yml"

env:
  BRANCH: ${{ github.ref_name }}

jobs:
  build:
    if: github.ref_name == 'beta' || github.event.pull_request.merged
    runs-on: ubuntu-latest

    outputs:
      ec2_deploy_hosts: ${{ steps.set_output.outputs.ec2_deploy_hosts }}
    steps:
      - name: Set EC2 Deploy Hosts
        id: set_output
        run: |
          if [ "${{ env.BRANCH }}" == "beta" ]; then
            echo "::set-output name=ec2_deploy_hosts::${{ vars.EC2_DEPLOY_HOSTS_1}}"
          else
            echo "::set-output name=ec2_deploy_hosts::${{ vars.EC2_DEPLOY_HOSTS}}"
          fi

      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm --filter api-v3 install

      - name: Build the API
        run: pnpm build --filter="api-v3"

      - name: Package application
        run: |
          tar -czf deploy.tar.gz -C apps/api/v3 build

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: deploy-package
          path: deploy.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ec2_host: ${{ fromJson(needs.build.outputs.ec2_deploy_hosts) }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: deploy-package

      - name: Deploy to EC2 ${{ env.BRANCH }}
        env:
          EC2_USER: ${{ vars.EC2_USER_2 }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
          PROJECT_PATH: ${{ env.BRANCH == 'beta' && vars.API3_BETA_PATH || vars.API3_PROD_PATH }}
          ENV_PATH: ${{ env.BRANCH == 'beta' && vars.API3_BETA_ENV_HOST || vars.API3_PROD_ENV_HOST }}
        run: |
          echo "$EC2_KEY" > private_key.pem
          chmod 600 private_key.pem

          mkdir -p ~/.ssh

          ssh-keyscan -H ${{ matrix.ec2_host }} >> ~/.ssh/known_hosts

          scp -i private_key.pem deploy.tar.gz $EC2_USER@${{ matrix.ec2_host }}:$PROJECT_PATH/public_html

          ssh -i private_key.pem $EC2_USER@${{ matrix.ec2_host }} << 'EOF'
            cd ${{ env.PROJECT_PATH }}/public_html
            rm -rf build
            tar -xzf deploy.tar.gz
            rm deploy.tar.gz
            export PATH=$PATH:/home/ubuntu/.nvm/versions/node/v20.14.0/bin:/home/ubuntu/.local/share/pnpm
            pnpm install
            scp ${{ secrets.EC2_ENV_HOST }}:$ENV_PATH .env
            cd build
            ln -s ../.env .env
            pm2 start ${{ env.BRANCH == 'beta' && '../ecosystem_beta.config.cjs' || '../ecosystem.config.cjs' }}
          EOF

          rm private_key.pem