name: Deploy Store to EC2

on:
  push:
    branches:
      - beta
    paths:
      - "apps/store/**"
      - ".github/workflows/deploy-store.yml"

  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - "apps/store/**"
      - ".github/workflows/deploy-store.yml"

env:
  BRANCH: ${{ github.ref_name }}

jobs:
  build:
    if: github.ref_name == 'beta' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    outputs:
      ec2_deploy_hosts: ${{ steps.set_output.outputs.ec2_deploy_hosts }}
    steps:
      - name: Set EC2 Deploy Hosts
        id: set_output
        run: |
          if [ "${{ env.BRANCH }}" == "beta" ]; then
            echo "::set-output name=ec2_deploy_hosts::${{ vars.EC2_DEPLOY_HOSTS_1}}"
          else
            echo "::set-output name=ec2_deploy_hosts::${{ vars.EC2_DEPLOY_HOSTS}}"
          fi

      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Install NVM
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install 20
          nvm use 20

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm --filter site install

      - name: Build application
        run: pnpm build --filter="store"

      - name: Package application
        run: |
          tar -czf deploy.tar.gz --exclude='node_modules' -C apps/site/ .

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: deploy-package
          path: deploy.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ec2_host: ${{ fromJson(needs.build.outputs.ec2_deploy_hosts) }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: deploy-package

      - name: Deploy to EC2 ${{ env.BRANCH }}
        env:
          EC2_USER: ${{ vars.EC2_USER_1 }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
          PROJECT_PATH: ${{ env.BRANCH == 'beta' && vars.SITE_BETA_PATH || vars.SITE_PROD_PATH }}
          ENV_PATH: ${{ env.BRANCH == 'beta' && vars.SITE_BETA_ENV_HOST || vars.SITE_PROD_ENV_HOST }}
        run: |
          echo "$EC2_KEY" > private_key.pem
          chmod 600 private_key.pem

          mkdir -p ~/.ssh

          ssh-keyscan -H ${{ matrix.ec2_host }} >> ~/.ssh/known_hosts

          scp -i private_key.pem deploy.tar.gz $EC2_USER@${{ matrix.ec2_host }}:$PROJECT_PATH

          ssh -i private_key.pem $EC2_USER@${{ matrix.ec2_host }} << 'EOF'
            cd ${{ env.PROJECT_PATH }}
            sudo rm -rf public_html/*
            tar -xzf deploy.tar.gz -C public_html
            ls -la public_html
            rm deploy.tar.gz
            cd public_html
            scp ${{ secrets.EC2_ENV_HOST }}:${{ env.ENV_PATH }} .env
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
            npm install --ignore-scripts
            pm2 start ${{ env.BRANCH == 'beta' && 'ecosystem_beta.config.cjs' || 'ecosystem.config.cjs' }}
          EOF

          rm private_key.pem
