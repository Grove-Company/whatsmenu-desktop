@layout('inner/layout')

@section('content')
<div class="ui text loader loadingBusca">Aguarde</div>
<div class="">
  <div class="ui grid">
    <div class="sixteen wide column centered">
      <a class="ui button blue botLEFT hide-for-large">Menu</a>
      <h1>Relatório de Cadastros</h1>
      <div class="ui segment">
        <div class="ui text loader loadingBusca">Aguarde</div>
        <div class="ui header">Resumo mês atual</div>
        {{--  <div class="ui divider"></div>  --}}
        <div class="ui content">
          {{--  <a href="#tableList"><b><u>Clique aqui para ver o detalhado!</u></b></a>  --}}
        </div>
        <div class="ui divider"></div>
          <div id="graph-monthly">
            <div>
                <canvas id="canvasRegisterActual" width="1918" height="405" style="width: 1918px; height: 405px;"></canvas>
            </div>
        </div>
      </div>
      </div>
    </div>
</div>

<div class="">
  <div class="ui grid">
      <div class="sixteen wide column centered">
        <div class="ui segment">
          <div class="ui text loader loadingBusca">Aguarde</div>
          <div class="ui header">Resumo Anual</div>
          {{--  <div class="ui divider"></div>  --}}
          <div class="ui content">
            {{--  <a href="#tableList"><b><u>Clique aqui para ver o detalhado!</u></b></a>  --}}
          </div>
          <div class="ui divider"></div>
            <div id="graph-monthly">
              <div>
                  <canvas id="canvasRegister" width="1918" height="405" style="width: 1918px; height: 405px;"></canvas>
              </div>
          </div>
        </div>
        <div class="ui divider"></div>
        <div id="select"></div>
        <div id="sumary" class="ui cards">
        </div>
      </div>
  </div>
</div>

<div class="">
  <div class="ui grid">
    <div class="sixteen wide column centered">
      <h3 id="tableList" class="ucfirst">Lista de clientes</h3>
      <div class="ui divider"></div>
      <table class="ui striped table very basic">
          <thead class="ui sticky hide-for-small-only">
              <tr class="">
                <th>#</th>
                <th>id</th>
                <th>Nome</th>
                <th>email</th>
                <th>cadastro</th>
                <th>vendedor</th>
              </tr>
          </thead>
          <tbody id="listUsers"></tbody>
      </table>
    </div>
  </div>
</div>
@endsection
@section('js')
  <script>
    $('.loadingBusca').dimmer('show')
    const ctxActual = document.getElementById('canvasRegisterActual').getContext('2d');
    const ctx = document.getElementById('canvasRegister').getContext('2d');
    const sellers = []
    const allUsers = []
    const days = []
    const months = []
    const borderColor = [
            'rgba(255, 99, 132, 1)',
            'rgba(54, 162, 235, 1)',
            'rgba(255, 206, 86, 1)',
            'rgba(75, 192, 192, 1)',
            'rgba(153, 102, 255, 1)',
            'rgba(255, 159, 64, 1)'
          ];

    let day = luxon.DateTime.local()

    while (day.toFormat('yyyy-MM-dd') !== day.toFormat('yyyy-MM-01')) {
      days.unshift(day.toFormat('yyyy-MM-dd'))
      day = day.minus({days: 1})
    }
    days.unshift(day.toFormat('yyyy-MM-01'));

    (async ()=> {
      const activeSellers = await $.get('{{route('adm.seller.listSellers')}}?status=1')

      for (let seller of activeSellers) {
        const item = await $.get('/administrator-api/financial/seller/' + seller.id)
        sellers.push(item)
      }

      months.push(...new Set(sellers.flatMap(s => s.months).map(m => m.month)))
      makeChart([...borderColor])
      makeChartAnualy([...borderColor])
      loadSelect()
      loadListUsers()
      $('.loadingBusca').dimmer('hide')
    })()

    function makeChartAnualy(colors) {
      const myChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: months,
          datasets: sellers.map(s => {
            const color = colors.shift()
            return {
              label: s.seller.name,
              data: months.map(day => s.months.find(m => m.month === day).users.filter(u => {
                if (u.controls.disableInvoice) {
                  return u.created_at.includes(day)
                } else {
                  return u.invoices[0].updated_at.includes(day)
                }
              }).length),
              backgroundColor: months.map(() => color),
              borderColor: months.map(() => color),
              borderWidth: 5
            }
          })
        },
        options: {
          scales: {
            yAxes: [
              {
                ticks: {
                  beginAtZero: true
                }
              }
            ]
          }
        }
      })
    }

    function makeChart(colors) {
      const myChart = new Chart(ctxActual, {
        type: 'bar',
        data: {
          labels: days,
          datasets: sellers.map(s => {
            const color = colors.shift()
            return {
              label: s.seller.name,
              data: days.map(day => s.months[s.months.length - 1].users.filter(u => {
                if (u.controls.disableInvoice) {
                  return u.created_at.includes(day)
                } else {
                  return u.invoices[0].updated_at.includes(day)
                }
              }).length),
              // data: days.map(day => [...s.months[s.months.length - 2].users, ...s.months[s.months.length - 1].users].filter(u => u.created_at.includes(day)).length),
              backgroundColor: days.map(() => color),
              borderColor: days.map(() => color),
              borderWidth: 5
            }
          })
        },
        options: {
          scales: {
            yAxes: [{
              ticks: {
                beginAtZero: true
              }
            }]
          }
        }
      })
    }

  </script>
  <script type="text/babel">
    function loadSelect() {
      ReactDOM.render(<SelectMonths months={months.reverse()}/>, document.querySelector('#select'))
      $('select.ui.dropdown').dropdown({
        onChange: () => loadListUsers()
      })
    }
    function loadListUsers() {
      const month = document.querySelector('#selectMonth').value
      const users = sellers.flatMap(s => s.months.filter(m => m.month === month)).flatMap(m => m.users)
      ReactDOM.render(<ListUsers users={users.reverse()}/>, document.querySelector('#listUsers'))
      ReactDOM.render(<Sumary users={users}/>, document.querySelector('#sumary'))
    }

    class ListUsers extends React.Component {
      render() {
        return this.props.users.map((u, i) => <ItemUser user={u} key={i} index={i + 1} />)
      }
    }
    class ItemUser extends React.Component {
      render() {
        return (
          <tr>
            <td>{this.props.index}</td>
            <td><span className="show-for-small-only"><b>id:</b></span> {this.props.user.id}</td>
            <td className="word-break-all">{this.props.user.name}</td>
            <td><span className="show-for-small-only"><b>E-mail:</b></span> {this.props.user.email}</td>
            <td><span className="show-for-small-only"><b>Cadastro:</b></span> {this.props.user.controls.serviceStart ? 'SIM' : 'NÃO'}</td>
            <td><span className="show-for-small-only"><b>Vendedor</b></span> {sellers.find(s => s.seller.id === this.props.user.sellerId).seller.name}</td>
          </tr>
        )
      }
    }

    class Sumary extends React.Component {

      getFlag(users) {
        const count = users.length
        const countMount = users.filter(u => u.controls.serviceStart).length
        const countNormal = users.filter(u => !u.controls.serviceStart).length
        const countImpressoras = users.filter(u => u.controls.salePrint).length
        const countMesas = users.filter(u => u.plans.some(p => p.category === 'table')).length
        const countEncomendas = users.filter(u => u.plans.some(p => p.category === 'package' && p.type === 'upgrade')).length

        if (count > 300) {
          return {
            flag: 'Faixa 5',
            countMount: countMount,
            countNormal: countNormal,
            countTotal: count,
            countImpressoras: countImpressoras,
            countMesas: countMesas,
            countEncomendas: countEncomendas,
            totalImpressoras: countImpressoras * 5,
            totalMesas: countMesas * 6,
            totalEncomendas: countEncomendas,
            totalMount: countMount * 5 + countMount * 6,
            totalNormal: countNormal * 6
          }
        }

        else if (count > 199 && count < 300) {
          return {
            flag: 'Faixa 4',
            countMount: countMount,
            countNormal: countNormal,
            countTotal: count,
            countImpressoras: countImpressoras,
            countMesas: countMesas,
            countEncomendas: countEncomendas,
            totalImpressoras: countImpressoras * 5,
            totalMesas: countMesas * 5,
            totalEncomendas: countEncomendas,
            totalMount: countMount * 5 + countMount * 5,
            totalNormal: countNormal * 5
          }
        }

        else if (count > 99 && count < 200) {
          return {
            flag: 'Faixa 3',
            countMount: countMount,
            countNormal: countNormal,
            countTotal: count,
            countImpressoras: countImpressoras,
            countMesas: countMesas,
            countEncomendas: countEncomendas,
            totalImpressoras: countImpressoras * 5,
            totalMesas: countMesas * 4,
            totalEncomendas: countEncomendas,
            totalMount: countMount * 5 + countMount * 4,
            totalNormal: countNormal * 4
          }
        }

        else if (count > 79 && count < 100) {
          return {
            flag: 'Faixa 2',
            countMount: countMount,
            countNormal: countNormal,
            countTotal: count,
            countImpressoras: countImpressoras,
            countMesas: countMesas,
            countEncomendas: countEncomendas,
            totalImpressoras: countImpressoras * 5,
            totalMesas: countMesas * 3,
            totalEncomendas: countEncomendas,
            totalMount: countMount * 5 + countMount * 3,
            totalNormal: countNormal * 3
          }

        } else {

          return {
            flag: 'Faixa 1',
            countMount: countMount,
            countNormal: countNormal,
            countImpressoras: countImpressoras,
            countMesas: countMesas,
            countEncomendas: countEncomendas,
            countTotal: count,
            totalImpressoras: countImpressoras * 5,
            totalMesas: 0,
            totalEncomendas: countEncomendas,
            totalMount: 0,
            totalNormal: 0
          }

        }

      }
      render() {


        const countSellers = [...new Set(this.props.users.map(u => u.sellerId))]

        let totalGeral = null

        if ({{auth.user.controls.type === 'adm'}}) {
          const info = this.getFlag(this.props.users)
          totalGeral = (
            <div className="card">
              <div className="content">
                <div className="header">Total Geral</div>
                <div className="description">
                  Delivery com cadastro: {info.countMount}<br/>
                  Delivery sem cadastro: {info.countNormal}<br/>
                  Total: {info.countTotal}<br/>
                  Impressoras: { info.countImpressoras }<br/>
                  Mesas: { info.countMesas }<br/>
                  Encomendas: { info.countEncomendas }
                </div>
              </div>
            </div>
          )
        }
        return (
          <React.Fragment>
            {
              countSellers.map((sid, i) => {
                const info = this.getFlag(this.props.users.filter(u => u.sellerId === sid))
                console.log(info.totalMesas)
                return (
                  <div className="card" key={i}>
                    <div className="content">
                      <div className="header">{sellers.find(s => s.seller.id === sid).seller.name}</div>
                      <div className="meta">{info.flag}</div>
                      <div className="description">
                        <div className="ui list">
                          <div className="item">Delivery com montagem: {info.countMount}</div>
                          <div className="item">Delivery sem montagem: {info.countNormal}</div>
                          <div className="item">Total: {info.countTotal}</div>
                          <div className="item">Impressoras: {info.countImpressoras}</div>
                          <div className="item">Mesas: {info.countMesas}</div>
                          <div className="item">Encomendas: {info.countEncomendas}</div>
                          <div className="item">
                            <div className="ui divider"></div>
                          </div>
                          <div className="item">Delivery com montagem: {WhatsMenu.toBRL(info.totalMount)}</div>
                          <div className="item">Delivery sem montagem: {WhatsMenu.toBRL(info.totalNormal)}</div>
                          <div className="item">Impressoras: { WhatsMenu.toBRL(info.totalImpressoras) }</div>
                          <div className="item">Mesas: {WhatsMenu.toBRL(info.totalMesas)}</div>
                          <div className="item">Encomendas: {WhatsMenu.toBRL(info.totalEncomendas)}</div>
                          <div className="item">Total: {WhatsMenu.toBRL(info.totalMount + info.totalNormal + info.totalMesas + info.totalEncomendas + info.totalImpressoras)}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                )
              })
            }
            {totalGeral}
          </React.Fragment>
        )
      }
    }

    class SelectMonths extends React.Component {
      render() {
        return (
          <div className="ui form">
            <div className="fields">
              <div className="field">
                <label>Mês:</label>
                <select className="ui dropdown" id="selectMonth">
                  {this.props.months.map((m, i) => <option key={i} value={m}>{m}</option> )}
                </select>
              </div>
            </div>
          </div>
        )
      }
    }
  </script>
@endsection
