@layout('inner/layout')
@section('content')
<h1 class="">Usuário</h1>
<div class="ui grid">
  <div class="row small-space">
    <div class="sixteen wide column">
      <a class="ui button blue botLEFT hide-for-large">Menu</a>
      <div class="ui segment secondary" style="overflow: inherit;">
        <div class="ui inverted dimmer" id="loadingBusca">
          <div class="ui text loader">Aguarde</div>
        </div>
        <div class="ui form">
          <div class="three fields">
            <div class="fourteen wide field">
              <label>Usuário</label>
              <input id="user" name="user" type="text">
            </div>
            <div class="field">
              <label>Buscar por</label>
              <select id="type" name="type" class="ui fluid dropdown">
                <option value="email">E-mail</option>
                <option value="slug">Slug</option>
                <option value="whatsapp">WhatsApp</option>
                <option value="name">Nome</option>
              </select>
            </div>
            <div class="two wide field">
              <button style="margin-top: 22px" type="button" id="send" class="ui green right floated button" tabIndex={0}>Buscar</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div id="userInfo" class="small-space"></div>

<div id="resultReleaseBlock" class="ui modal">
  <div class="header">Resultado</div>
  <div class="scrolling content">
    <div id="modalSuccess">asdasdfasdf</div>
    <div id="modalError">qwerqwerqwer</div>
  </div>
  <div class="actions">
    <div class="green ui approve button">OK</div>
  </div>
</div>
@endsection
@section('js')
<script type="text/babel">
  (async () => {
    document.querySelector('#user').focus();
  })();

  const users = {
    total: NaN,
    perPage: NaN,
    page: NaN,
    lastPage: NaN,
    data: []
  }

  let user
  let profile
  let controlUpdate = 0

  function message(color, title, message) {
  $('body').toast({
    title: title,
    message: message,
    class : color,
    className: {
        toast: 'ui message'
    }
  })
}

  async function getUsers() {
    try {
      const url = '/adm/users/' + (!users.page ? '1' : ++users.page)
      const usrs = await $.get(url)
      users.total = usrs.total
      users.perPage = usrs.perPage
      users.page = usrs.page
      users.lastPage = usrs.lastPage
      users.data.push(...usrs.data)

      ReactDOM.render(<Users users={users.data} />, document.getElementById('userInfo'))
    } catch (error) {
      console.error(error)
    }
  }

  getUsers()

  $('#coluna-conteudo').visibility({
      once: false,
      observeChanges: true,
      onBottomVisible: () => getUsers()
    })


  document.querySelector('#user').onkeyup = (e) => {
    if (e.key === 'Enter') {
      document.querySelector('#send').click()
    }
  }
  document.querySelector('#send').onclick = async () => {
    try {
      $('#loadingBusca').dimmer('show')
      const data = {
        _csrf: '{{ csrfToken }}',
        type: $('#type').val(),
        user: $('#user').val().replace('mailto:', '').trim()
      }

      const result = await $.post('{{ route('adm.getUser.post') }}', data)

      if (result.success) {
        console.log(result.user);
        if (Array.isArray(result.user)) {

          if (result.user.length > 0) {

            ReactDOM.unmountComponentAtNode(document.getElementById('userInfo'))
            ReactDOM.render(<Users users={result.user} />, document.getElementById('userInfo'))

          } else {
            WhatsMenu.alert('yellow', 'Nada!', 'Não Encontrei ninguém!')
          }

        } else {

          user = result.user
          profile = result.profile
          const plans = await $.get('/adm/plans')
          ReactDOM.unmountComponentAtNode(document.getElementById('userInfo'))
          ReactDOM.render(<UserInfo user={user} profile={profile} plans={plans} />, document.getElementById('userInfo'))
          $('.ui.dropdown').dropdown()

        }
      }
      $('#loadingBusca').dimmer('hide')
    } catch (error) {
      console.error(error)
      $('#loadingBusca').dimmer('hide')
      alert('Usuário não encontrado!')
    }
  }


  class UserInfo extends React.Component {
    constructor(props) {
      super(props)
      this.state = {
        payment: this.props.user.controls.disableInvoice,
        status: this.props.profile && this.props.profile.status ? 'Ativo' : 'Bloquado',
        plans: this.props.plans,
        whats: this.props.profile && this.props.profile.showTotal ? 'Sim' : 'Não',
        km: this.props.profile && this.props.profile.options && this.props.profile.options.enableKm ? 'Sim' : 'Não',
        user: this.props.user
      }

      this.handleChange = this.handleChange.bind(this)
    }

    componentDidMount() {
      $('.ui.checkbox').checkbox()
      if (this.props.user) {
        // console.log($('#canceled')[0].checked)
        document.querySelector('#sendUser').onclick = async () => {
          try {
            const result = await $.ajax({
              method: 'PATCH',
              url: '{{ route('adm.updateUser.post') }}',
              data: {
                _csrf: '{{ csrfToken }}',
                id: $('#uid').val(),
                name: $('#uname').val(),
                email: $('#uemail').val(),
                whatsapp: $('#uwhatsapp').val(),
                secretNumber: $('#usecret').val(),
                due: $('#udue').val(),
                @if(auth.user.controls.type === 'adm')
                canceled: $('#canceled')[0].checked,
                @endif
                password: $('#upassword').val(),
                disableInvoice: ({{auth.user.controls.type === 'adm'}}) ? $('#udisableInvoice').val() : this.props.user.controls.disableInvoice ? 1 : 0
              }
            })

            if (result.success) {
              this.state.user = result.user

              const usrGlobal = users.data.findIndex(u => u.id === result.user.id)

              if (usrGlobal > -1) {
                users.data[usrGlobal] = result.user
              }

              this.forceUpdate()

              message('green', 'Usuário', 'Usuário atualizado com sucesso!')
            }
          } catch (error) {
            console.error(error)
            alert('houve um erro! Por favor avise o Jason.')
          }
        }
      }
    }

    async setSupport(e, id) {
      try {
        // console.log('user', id)
        const user = await $.post('{{route('adm.user.add.support')}}', {user: id, _csrf: localStorage.csrf})

        if (user) {
          this.setState({
            user: user
          })
          // this.state.user = user
          // this.props.user = user

          const usrGlobal = users.data.findIndex(u => u.id === user.id)

          if (usrGlobal > -1) {
            users.data[usrGlobal] = user
          }
          console.log({user: this.state.user});
          this.forceUpdate()

          message('green', 'Usuário', 'Suporte atribuído com sucesso!')
        }
      } catch (error) {
        console.error(error)
      }
    }

    toList() {
      ReactDOM.unmountComponentAtNode(document.getElementById('userInfo'))
      ReactDOM.render(<Users users={users.data} />, document.getElementById('userInfo'))
    }

    async resetSecurityKey(userId) {
      try {
        await $.ajax({
          method: 'PATCH',
          url: '/dashboard/account/resetSecurityKey',
          data: {
            _csrf: localStorage.csrf,
            userId: userId,
          }
        })
        message('green', 'Sucesso', 'Chave de segurança deletada com sucesso!')
      } catch (error) {
        message('red', 'Ops', 'Não foi possivel realizar essa alteração. Por favor tente novamente')
        console.error(error)
        throw error
      }
    }
    async switchLogin(userId) {
      try {
        await $.ajax({
          method: 'GET',
          url: '/switchLogin/' + userId
        })
        message('green', 'Redirecionando...', 'Redirecionando para o painel do Usuário!')
        location = location.origin + '/dashboard'
      } catch (error) {
        message('red', 'Ops', 'Não foi possivel realizar essa alteração. Por favor tente novamente')
        console.error(error)
        throw error
      }
    }

    handleChange(event) {
      this.state[event.target.value] =  event.target.value
    }

    checkbox(id) {
      const input = document.getElementById(id)
      input.value = input.checked
    }

    render() {
      console.log(luxon.DateTime.fromFormat(this.props.user.created_at, 'yyyy-MM-dd hh:mm:ss').toString())
      let support = null
      let seller = (<p><strong>Vendedor:</strong>  {this.props.user.seller && this.props.user.seller.name} </p>)


      if (luxon.DateTime.fromFormat(this.props.user.created_at, 'yyyy-MM-dd hh:mm:ss') >= luxon.DateTime.fromISO('2021-06-07T00:00:00')) {
        support = (
          <button className="ui button yellow adm_header_button" onClick={(e) => this.setSupport(e, this.props.user.id)}>Atribuir Suporte</button>
        )
      }

      if (this.state.user.supportId) {
        support = (
          <p><strong>Suporte Responsável:</strong> {this.state.user.support.name}</p>
        )
      }

      console.log(this.props.user.invoices)

      return (
        <React.StrictMode>
          <div className="ui form">
            <h2 className="pointer" onClick={this.toList}><i className="arrow circle left icon"></i>Voltar para Lista</h2>

            <div className="ui ordered steps">
              {
                (this.props.user.controls.salePrint || this.props.user.controls.sabePrintSupport) ?
                  (
                    <div className="completed step">
                      <div className="content">
                        <div className="title">Impressora</div>
                        <div className="description">O cliente comprou impressora</div>
                      </div>
                    </div>
                  )
                :
                  null

              }
              {
                (this.props.user.controls.serviceStart || this.props.user.controls.serviceStartSupport) ?
                  (
                    <div className="completed step">
                      <div className="content">
                        <div className="title">Cardápio</div>
                        <div className="description">Cliente contratou cadastro de cardápio</div>
                      </div>
                    </div>
                  )
                :
                  null
              }

            </div>

            <h4 className="ui dividing header fields adm_header_info" ><span className="field">Dados do Usuário: {this.props.user.id}</span> <span className="field">{this.props.user.seller && seller}</span> <span className="field">{support}</span></h4>
            <div className="ui hidden divider"></div>

              <div className="three fields">
                <div className="field">
                  <label>Nome</label>
                  <input type="hidden" id="uid" defaultValue={this.props.user.id}/>
                  <input type="text" id="uname" defaultValue={this.props.user.name} placeholder="José Raimundo Exemplo da Silva"/>
                </div>
                <div className="field">
                  <label>E-mail</label>
                  <input type="email" id="uemail" defaultValue={this.props.user.email} placeholder="usuario@exemplo.com.br"/>
                </div>
                <div className="field">
                  <label>CPF/CNPJ</label>
                  <input type="text" id="usecret" defaultValue={this.props.user.secretNumber} placeholder="333.333.333-33"/>
                </div>
              </div>

              <div className="two fields">
                <div className="field">
                  <label>WhatsApp</label>
                  <input type="tel" id="uwhatsapp" defaultValue={this.props.user.whatsapp} placeholder="99 99999-9999"/>
                </div>
                <div className="field disabled">
                  <label>Cadastro</label>
                  <input type="email" id="ucreatedAt" defaultValue={this.props.user.created_at}/>
                </div>
              </div>

            <div className="field">
              <div className="five fields">
                <div className="field">
                  <label>Vencimento</label>
                  <input type="text" id="udue" defaultValue={this.props.user.due} placeholder="Exemplo: 05"/>
                </div>
                <div className="field {{auth.user.controls.type !== 'adm' ? 'disabled' : ''}}">
                  <label>Forma de Pagamento - {{auth.user.controls.type}}</label>
                  <select id="udisableInvoice" name="type" className="ui fluid dropdown" defaultValue={this.state.payment} onChange={this.handleChange}>
                    <option value="false">Boleto</option>
                    <option value="true">Cartão</option>
                  </select>
                </div>
                <div className="field">
                  <label>Senha</label>
                  <input type="text" id="upassword" placeholder="Digite a nova senha"/>
                </div>
                <div className="field">
                  <label>Chave de Segurança</label>
                  <button className="ui button" onClick={()=> {this.resetSecurityKey(this.props.user.id)}}>Resetar</button>
                </div>
                <div className="field">
                  <label>Acessar painel</label>
                  <button className="ui button" onClick={()=> {this.switchLogin(this.props.user.id)}}>Acessar</button>
                </div>
              </div>
              @if(auth.user.controls.type === 'adm')
              <div className="fields">
                <div className="field">
                  <label>Cancelamento de Usuário</label>
                  <div className="ui toggle checkbox" onClick={() => {this.checkbox("canceled")}}>
                    <label>Cancelar cobranças desse usuário?</label>
                    <input type="checkbox" id="canceled" defaultChecked={this.props.user.controls.canceled}/>
                  </div>
                </div>
              </div>
              @endif
            </div>
            <button type="button" id="sendUser" className="ui green right floated button" tabIndex={1}>Salvar</button>

            <div className="small-space"></div>
            <Profile profile={this.props.profile} user={this.props.user} plans={this.props.plans}/>
            <div className="small-space"></div>
            <Addons user={this.props.user} />

            @if(auth.user.controls.type === 'adm')
            <div className="small-space"></div>
            <PendingRequests invoices={this.props.user.invoices}/>
            @endif

          </div>
        </React.StrictMode>
      )
    }
  }

  class Addons extends React.Component {

    constructor(props) {
      super()
      this.state = {
        showStart: false,
        showPrint: false,
        valueStart: 149.90,
        valuePrint: 310.10,
        quantityPrint: 1,
        user: props.user,
      }
    }
    toggle(data) {
      this.setState(data)
      this.forceUpdate()
    }

    async emmit(e) {
      try {
        e.target.className += ' disabled'
        const invoice = {
          userId: this.state.user.id,
          itens: [],
          _csrf: localStorage.csrf,
        }

        if (this.state.showStart) {
          invoice.itens.push({name: 'Serviço Cadastro', quantity: 1, value: this.state.valueStart})
        }

        if (this.state.showPrint) {
          invoice.itens.push({name: 'Impressora Térmica Bluetooth', quantity: this.state.quantityPrint, value: this.state.valuePrint})
        }

        const response = await $.post('/dashboard/invoices/addon/emmit', invoice)

        if (response && response.success) {
          document.querySelector('#user').value = this.state.user.email
          document.querySelector('#type').value = 'email'
          document.querySelector('#send').click()

          WhatsMenu.alert('green', 'Boleto Emitido', 'Boleto emitido com sucesso!')
        }

      } catch (error) {
        console.error(error);
        WhatsMenu.alert('red', 'Boleto não Emitido', 'Erro ao emitir boleto, avise o Jason!')
      }
    }

    componentDidMount() {

    }

    render() {
      return (
        <div className="ui form">
          <div className="ui dividing header">Adicionais</div>
          <div className="two fields">
            <div className="field">
              <div className="ui toggle checkbox startSupport" onClick={() => {
                this.state.showStart = !this.state.showStart
                this.toggle(this.state)
              }}>
                <label>Serviço de cadastro</label>
                <input type="checkbox" defaultChecked={this.state.showStart}/>
              </div>
            </div>
            {
              this.state.showStart
              ?
                <div className="field">
                  <label>Valor</label>
                  <input type="number" defaultValue={this.state.valueStart} onChange={(e) => {
                    this.state.valueStart = e.target.value
                    this.toggle(this.state)
                  }}/>
                </div>
              :
                null
            }
          </div>
          <div className="three fields">
            <div className="field">
              <div className="ui toggle checkbox startSupport" onClick={() => {
                this.state.showPrint = !this.state.showPrint
                this.toggle(this.state)
              }}>
                <label>Impressora</label>
                <input type="checkbox" defaultChecked={this.state.showPrint}/>
              </div>
            </div>
            {
              this.state.showPrint
              ?
                <React.Fragment>
                  <div className="field">
                    <label>Quantidade</label>
                    <input type="number" min={0} defaultValue={this.state.quantityPrint} onChange={(e) => {
                      this.state.quantityPrint = parseInt(e.target.value)
                      this.toggle(this.state)
                    }}/>
                  </div>
                  <div className="field disabled">
                    <label>Valor</label>
                    <input type="number" value={(this.state.valuePrint * this.state.quantityPrint).toFixed(2)}/>
                  </div>
                </React.Fragment>
              :
                null
            }
          </div>
          <button className={this.state.showStart || this.state.showPrint ? "ui button green fluid" : "ui button green fluid disabled"} onClick={(e) => this.emmit(e)} type="button">Emitir</button>
        </div>
      )
    }
  }

  class PendingRequests extends React.Component {

    async setPaid(invoice) {
      try {
        const payload = await $.ajax({
          method: 'PUT',
          url: '{{route('adm.api.paghiper.paid.manual')}}',
          data: {invoice: invoice, _csrf: localStorage.csrf}
        })

        WhatsMenu.alert('green', 'Baixa Manual', 'Baixa efetuada com sucesso!')

      } catch (error) {

        console.error(error)
        WhatsMenu.alert('red', 'Erro ao dar Baixa', 'Chama o Jason!')

      }
    }

    getStatus(status) {
      switch (status) {

        case 'pending':
          return 'Pendente'
          break;

        case 'canceled':
          return 'Cancelado'
          break;

        default:
          return 'Pago'
      }
    }

    render() {
      return (
        <div>
          <h4 className="ui dividing header">Faturas</h4>
          <table className="ui table stripped">
            <thead>
              <tr>
              <th>Id da Transação</th>
              <th>Valor</th>
              <th>Vencimento</th>
              <th>Status</th>
              <th>Ação</th>
              </tr>
            </thead>
            <tbody>
              {this.props.invoices.map((invoice, index) => {
                const requestPaid = invoice.requests.find(r => r.status !== 'canceled' && r.status !== 'pending')
                console.log(invoice.requests)
                return (
                  <tr key={index}>
                    <td>{requestPaid
                      ? requestPaid.transactionId
                      : invoice.requests.length > 0
                        ? invoice.requests[invoice.requests.length - 1].transactionId
                        : '-'}</td>
                    <td>{WhatsMenu.toBRL(invoice.value)}</td>
                    <td>{luxon.DateTime.fromISO(invoice.expiration).toFormat('dd-MM-yyyy')}</td>
                    <td>{this.getStatus(invoice.status)}</td>
                    <td><button disabled={invoice.status === 'paid'} onClick={() => this.setPaid(invoice.requests[invoice.requests.length - 1])} className="ui button green">Baixa</button></td>
                  </tr>
                )
              })}
            </tbody>
          </table>
        </div>
      )
    }
  }

  class Profile extends React.Component {
    constructor(props) {
      super(props)

      this.state = {
        user: this.props.user,
        plans: this.props.plans,
        km: this.props.profile && this.props.profile.options && this.props.profile.options.enableKm ? 'Sim' : 'Não', //aqui
        selected_plan: {
          plan_category: null,
          plan_id : null,
          plan_upgrade: new Set(),
          plan_delete: new Set()
        }, //Planos do tipo registro
        block: false
      }

      this.deleteAllPlan = this.deleteAllPlan.bind(this)
      this.addPlan = this.addPlan.bind(this)
    }

    async componentDidMount() {
      $('.ui.fluid.selection.dropdown').dropdown()



      if (this.props.profile) {
        document.querySelector('#plans_save').onclick = this.addPlan
        // document.querySelector('#plans_delete').onclick = this.deleteAllPlan

        document.querySelector('#sendProfile').onclick = async () => {
          try {
            const result = await $.ajax({
              method: 'PATCH',
              url: '{{ route('adm.updateProfile.post') }}',
              data: {
                _csrf: '{{ csrfToken }}',
                id: $('#pid').val(),
                name: $('#pname').val(),
                whatsapp: $('#pwhatsapp').val(),
                status: $('#pstatus').val(),
                showTotal: $('#pshowtotal').val(),
                km: $('#pkm').val()
              }
            })

            if (result.success) {
              const user =  users.data.findIndex(u => u.id === result.profile.userId)

              if (user > -1) {
                users.data[user].profile = result.profile
              }

              message('green', 'Perfil', 'Perfil atualizado com sucesso!')
            }
          } catch (error) {
            console.error(error)
            alert('houve um erro! Por favor avise o Jason.')
          }
        }
      }

      try{
        const plansUserFetch = await $.get('/dashboard/userPlans/' + this.state.user.id)
        const arrPlanUpgrade = this.state.user.plans.map(plan => plan.id)
        const plansUser = this.state.user.plans.filter(plan => plan.type === 'register')

        if(plansUserFetch.length){
          plansUser.forEach((plan, indexPlan) => {
            if(plan.id === plansUserFetch[0].flexPlanId && plan.type === 'register'){
              this.setState({
                  selected_plan : {
                    plan_category: plan.category,
                    plan_id: parseInt(plan.id),
                    plan_upgrade: new Set(arrPlanUpgrade),
                    plan_delete: new Set()
                  },
                  block: true
                })
            }
          })
        }
      }catch(e){
        console.log(e)
      }


    }

    async componentDidUpdate(prevProps) {
      if(this.state.selected_plan.plan_category !== null && this.state.block){
        $('.selected_item').addClass('disabled')
        $('.selected_item .text').text(this.state.plans.filter(el => el.id == this.state.selected_plan.plan_id).map(el => el.name + ' - ' + WhatsMenu.toBRL(el[this.state.user.controls.period || 'monthly']) + (!el.status ? ' (PLANO ANTIGO)' : '')))
      }

      try {
        if (controlUpdate === 0) {
          controlUpdate++
          const plans = await $.ajax({
            method: 'GET',
            url: '/dashboard/user/getUserPlans/' + this.props.user.id
          })
          const newUser = this.state.user
          newUser.plans = plans
          this.setState({ user: newUser })
        }
      } catch (error) {
        console.error(error)
        throw error
      }

    }

    async deleteAllPlan(event) {
      const envFlexPlan = JSON.parse(JSON.stringify(this.state.selected_plan))
      if(!this.state.block && this.state.selected_plan.plan_category === null || !this.state.user.plans.length){
        message('orange', 'Controle de pacotes', 'Não existem pacotes para deletar' )
        return
      }


      try {
        let data = await $.ajax({
          method: 'DELETE',
          url: '/dashboard/userPlans',
          data: {
            _csrf: '{{ csrfToken }}',
            userId: this.props.user.id,
            // flexPlanId: envFlexPlan
          }
        })
          $('.selected_item').removeClass('disabled')
          $('.selected_item .text').text("Desativado")
          this.setState({
            selected_plan: {
            plan_category: null,
            plan_id : null,
            plan_upgrade: new Set(),
            plan_delete: new Set()
          },
          block: false
          })

        message('green', 'Controle de pacotes', 'Pacote desativado com sucesso!')
        controlUpdate = 0
        this.forceUpdate()
      } catch (error) {
        console.error(error)
        throw error
        alert('houve um erro! Por favor avise o Jason ou o Bruno.')
      }
    }

    async addPlan(event) {
      const envFlexPlan = JSON.parse(JSON.stringify(this.state.selected_plan))
      envFlexPlan.plan_delete = Array.from(envFlexPlan.plan_delete)
      envFlexPlan.plan_upgrade = Array.from(envFlexPlan.plan_upgrade)

      const hasAllPlans = envFlexPlan.plan_upgrade.every(planUp => {
        return this.state.user.plans.some(planUser => planUser.id === planUp)
      })

      if(!this.state.block && this.state.selected_plan.plan_category === null || this.state.selected_plan.plan_category === 'null' || hasAllPlans && !envFlexPlan.plan_delete.length || this.state.block){
        message('orange', 'Controle de pacotes', 'Não há pacotes para salvar!')
        return
      }

      envFlexPlan.plan_upgrade = envFlexPlan.plan_upgrade.filter(planUp => {
        return !this.state.user.plans.some(planUser => planUser.id === planUp)
      })

      try {
        let data = await $.ajax({
        method: 'POST',
        url: '/dashboard/userPlans',
        data: {
          _csrf: '{{ csrfToken }}',
          userId: this.props.user.id,
          flexPlanId: envFlexPlan
        }
      })
        $('.selected_item').addClass('disabled')
        this.setState({
          block: true
        })
        message('green', 'Controle de pacotes', 'Pacote alterado com sucesso!')
        controlUpdate = 0
        this.forceUpdate()
      } catch (error) {
        console.error(error)
        throw error
        alert('houve um erro! Por favor avise o Jason ou o Bruno.')
      }
    }

    getTotalValue() {
      let val = 0
      if(this.state.selected_plan.plan_id !== null){
        this.state.selected_plan.plan_upgrade.add(this.state.selected_plan.plan_id)
        let plansArr = Array.from(this.state.selected_plan.plan_upgrade)
        plansArr.forEach(id => {
            const plan = this.state.plans.find(plan => plan.id == id)
            val += this.state.user.controls.period ? plan.prices[this.state.user.controls.period].value : plan.prices['monthly'].value 
        })
      }

      return val
    }

    periodReturn(){
      switch(this.state.user.controls.period){
        case 'monthly':
          return 'Mensal'
        case 'semester':
          return 'Semestral'
        case 'yearly':
          return 'Anual'
        default:
          return 'Mensal'
      }
    }

    render() {
      if (!this.props.profile) {
        return (
          <div>
            <h4 className="ui dividing header">Perfil - Não Cadastrado!</h4>
          </div>
        )
      }

      return (
        <div>
          <h4 className="ui dividing header">Perfil {this.props.profile.id}</h4>
          <div className="field">
            <div className="fields">
              <div className="seven wide field">
                <label>Título</label>
                <input type="hidden" id="pid" defaultValue={this.props.profile.id}/>
                <input type="text" id="pname" defaultValue={this.props.profile.name} placeholder="Nome do meu negócio de sucesso"/>
              </div>
              <div className="four wide field">
                <label>WhatsApp</label>
                <input type="tel" id="pcontact" defaultValue={this.props.profile.whatsapp} placeholder="99 99999-9999"/>
              </div>
              <div className="four wide field disabled">
                <label>SLUG</label>
                <input type="text" defaultValue={this.props.profile.slug} placeholder="Apt #"/>
              </div>
            </div>
          </div>
          <div className="field">
            <div className="three fields">
              <div className="field">
                <label>Status</label>
                <select id="pstatus" name="pstatus" className="ui fluid dropdown" defaultValue={this.props.profile.status} onChange={this.handleChange}>
                  <option value="1">Ativo</option>
                  <option value="0">Bloqueado</option>
                </select>
              </div>
              <div className="field">
                <label>Valor no WhatsApp?</label>
                <select id="pshowtotal" name="showTotal" className="ui fluid dropdown" defaultValue={this.props.profile.showTotal} onChange={this.handleChange}>
                  <option value="1">Sim</option>
                  <option value="0">Não</option>
                </select>
              </div>
              <div className="field">
                <label>Config. KM</label>
                <select id="pkm" name="km" className="ui fluid dropdown" defaultValue={this.state.km} onChange={this.handleChange}>
                  <option value='1'>Sim</option>
                  <option value='0'>Não</option>
                </select>
              </div>
            </div>

          </div>
          <div className="clearfix">
            <button type="button" id="sendProfile" className="ui green right floated button" tabIndex={1}>Salvar</button>
          </div>
          <div className="ui divider"></div>
          <div className="plans_content"  >
            <div id="select_plans" className="field">
              <div className="plan_name">
              <label>Plano Principal</label>
              <div>
                {/*<button className="ui button mini red" id="plans_delete">Deletar</button>*/}
                <button className="ui button mini green" id="plans_save">Salvar</button>
              </div>
              </div>
              <select id="selected_item" className={this.state.selected_plan.plan_category !== null && this.state.block? 'selected_item ui fluid selection dropdown disabled' : 'selected_item ui fluid selection dropdown' } onChange={(e) => {

                if(!this.state.block){
                    $('.plan_type_upgrade').each((ind, input) => {
                      input.checked = false
                    })

                    this.setState((state) => {
                    const newSelected = state.selected_plan

                    if(e.target.value === 'null'){
                      newSelected.plan_category = null
                      newSelected.plan_id = null
                      newSelected.plan_upgrade = new Set()
                      newSelected.plan_delete = new Set()
                      return {selected_plan: newSelected}
                    }else{
                      const target = parseInt(e.target.value)
                      newSelected.plan_category = this.state.plans.filter(plan => plan.id === target)
                                                                  .map(plan => plan.category)
                                                                  .join()
                      newSelected.plan_id = parseInt(e.target.value)
                      newSelected.plan_upgrade = new Set(this.state.user.plans.filter(plan => !plan.status).map(plan => plan.id))
                      newSelected.plan_delete = new Set()
                      return {selected_plan: newSelected}
                    }
                  })
                  }

              }}
              value={this.state.selected_plan.plan_id !== null ? this.state.selected_plan.plan_id  : 'null'}
              >
                <option key={'null'} value="null">Desativado</option>
                {
                  this.state.plans.map(plan => {
                    if(plan.type === 'register' && plan.status || this.state.user.plans.find(planUser => planUser.id == plan.id && !planUser.status && !plan.status)){
                      return <option key={plan.category + plan.id + 'register'} id={plan.name + plan.id} data-type={plan.type} value={plan.id}>{plan.name + ' - '  + WhatsMenu.toBRL(plan.prices[this.state.user.controls.period || 'monthly'].value) + (!plan.status ? ' (PLANO ANTIGO)': '')}</option>
                    }
                  })
                }
              </select>
            </div>
            {
              this.state.selected_plan.plan_category !== null &&
              <div className="field">
                <label>Planos Adicionais</label>
                <div className="">
                  {
                    this.state.plans.map((plan, indexPlan) => {
                      const setPlan = new Set()
                      const plansUser = this.state.user.plans.map(plan => plan.id)
                      if((plan.type === 'register' && plan.status) || this.state.user.plans.find(planUser => plan.type === 'register' && planUser.id === plan.id )){
                        if(this.state.selected_plan.plan_category !== plan.category){
                          return (
                            <label key={WhatsMenu.hash(6)} className="plan_type_content">
                                <input type="checkbox" className="plan_type_upgrade" defaultChecked={this.state.selected_plan.plan_upgrade.has(plan.id)} data-type={plan.type} data-status={plan.status} data-name={plan.name} value={plan.id} name={plan.name} onClick={(e) => {
                                  const inputs = document.querySelectorAll('input[name='+ plan.name + ']')
                                  let valueDelete;
                                  inputs.forEach(el => {
                                    if(el.dataset.type !== plan.type && plan.name !== el.dataset.name){
                                      el.checked = false
                                      valueDelete = parseInt(el.value)
                                    }
                                  })

                                  const planId = parseInt(e.target.value)
                                  this.setState(state => {
                                    const newSelected = state.selected_plan
                                    if(e.target.checked){
                                      newSelected.plan_upgrade.add(planId)
                                      valueDelete && newSelected.plan_upgrade.delete((valueDelete))
                                      this.state.user.plans.find(plan => plan.id === valueDelete) && newSelected.plan_delete.add(valueDelete)
                                      newSelected.plan_delete.delete(planId)
                                    }else{
                                      newSelected.plan_upgrade.delete(planId)
                                      this.state.user.plans.find(plan => plan.id === planId) && newSelected.plan_delete.add(planId)
                                    }
                                    return {selected_plan: newSelected, block: false}
                                  })

                                }} />
                              {plan.name + ' - ' + WhatsMenu.toBRL(plan.prices[this.state.user.controls.period || 'monthly'].value) + ' ' + (this.state.user.plans.find(planUser => planUser.id === plan.id && !plan.status) ? '(PLANO ANTIGO)' : '') }
                            </label>
                            )
                        }

                      }

                    })
                  }
                </div>
              </div>
            }
            <div className="ui divider"></div>
            {
              this.state.selected_plan.plan_category !== null &&
              <div className="field">
                <label>Planos Adicionais Com Desconto</label>
                <div className="">
                  {
                    this.state.plans.map((plan) => {
                      const setPlan = new Set()
                      if(plan.type === 'upgrade'){
                        if(this.state.selected_plan.plan_category !== plan.category){
                          const dataChecked = {"defaultChecked" : this.state.selected_plan.plan_upgrade.has(plan.id) ? true : ''}
                          return (
                            <label key={plan.id} className="plan_type_content">
                                <input type="checkbox" className="plan_type_upgrade" {...dataChecked} data-type={plan.type} value={plan.id} name={plan.name} onClick={(e) => {
                                  const inputs = document.querySelectorAll('input[name='+ plan.name + ']')
                                  let valueDelete;
                                  inputs.forEach(el => {
                                    if(el.dataset.type !== plan.type && plan.name){
                                      el.checked = false
                                      valueDelete = parseInt(el.value)
                                    }
                                  })

                                  const planId = parseInt(e.target.value)
                                  this.setState(state => {
                                    const newSelected = state.selected_plan
                                    if(e.target.checked){
                                      newSelected.plan_upgrade.add(planId)
                                      valueDelete && newSelected.plan_upgrade.delete((valueDelete))
                                      this.state.user.plans.find(plan => plan.id === valueDelete) && newSelected.plan_delete.add(valueDelete)
                                      newSelected.plan_delete.delete(planId)
                                    }else{
                                      newSelected.plan_upgrade.delete(planId)
                                      this.state.user.plans.find(plan => plan.id === planId) && newSelected.plan_delete.add(planId)
                                    }
                                    return {selected_plan: newSelected, block: false}
                                  })

                                }}/>
                              {this.state.user.controls.period ? ' ' + plan.name + ' - ' + WhatsMenu.toBRL(plan.prices[this.state.user.controls.period].value) : ' ' + plan.name + ' - ' + WhatsMenu.toBRL(plan.prices['monthly'].value)}
                            </label>
                            )
                        }

                      }

                    })
                  }
                </div>
              </div>
            }

              <div className="plan_value_user">
              <span><strong>Total: {WhatsMenu.toBRL(this.getTotalValue())}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tipo de Período: {this.periodReturn()}</strong></span>
              </div>
          </div>
          <div className="small-space"></div>
        </div>
      )
    }
  }

  class Users extends React.Component {
    componentDidMount() {

      $('.infinity').visibility({
        once: false,
        observeChanges: true,
        // onBottomVisible: () => getUsers()
      })

    }

    async openUser(user) {
      const plans = await $.get('/adm/plans')
      ReactDOM.unmountComponentAtNode(document.getElementById('userInfo'))
      ReactDOM.render(<UserInfo user={user} profile={user.profile} plans={plans} />, document.getElementById('userInfo'))
    }

    render() {
      return (
        <table className="ui table striped infinity">
          <thead>
            <tr>
              <th>ID</th>
              <th>Nome</th>
              <th>E-mail</th>
              <th>WhatsApp</th>
              <th>Slug</th>
              <th>Suporte</th>
              <th>Vendedor</th>
              <th>Data de Criação</th>
            </tr>
          </thead>
          <tbody>
            {this.props.users.map((usr, index) => {
              // console.log(usr);
              return (
                <tr className="pointer" key={index} onClick={() => this.openUser(usr)}>
                  <td>{usr.id}</td>
                  <td>{usr.name}</td>
                  <td>{usr.email}</td>
                  <td>{usr.whatsapp}</td>
                  <td>{usr.profile ? usr.profile.slug : '-'}</td>
                  <td>{usr.support ? usr.support.name : '-'}</td>
                  <td>{usr.seller ? usr.seller.name : '-'}</td>
                  <td>{usr.created_at}</td>
                </tr>
              )
            })}
          </tbody>
          <tfoot>
            <tr className="bg-green pointer" onClick={getUsers}>
              <td className="center aligned bg-trans pointer" colSpan={7}>{users.page !== users.lastPage ? <span className="wite pointer"><i className="arrow down icon"></i> Carregar mais <i className="arrow down icon"></i></span> : null}</td>
            </tr>
          </tfoot>
        </table>
      )
    }
  }

</script>
@endsection
