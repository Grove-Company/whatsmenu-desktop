@layout('inner/layout')
@section('content')
<div class="">
  <div class="ui grid">
      <div class="sixteen wide column centered">
          <!-- CONTEUDO SEMPRE DENTRO DESSAS TAG ACIMA -->
          <a class="ui button blue botLEFT hide-for-large">Menu</a>
          <h1>Perfil</h1>
          <div class="ui pointing secondary menu stackable massive">
              {{--  <a class="item active" data-tab="restaurante">Restaurante</a>  --}}
              {{--  <a class="item" href="#address" data-tab="endereco">Endereço</a>  --}}
              {{--  <a class="item" data-tab="horario">Horário de funcionamento</a>  --}}
              <a class="item active" href="#taxdelivery" id="tabFrete" data-tab="frete">Frete</a>
          </div>
          <div class="ui bottom attached tab segment" data-tab="restaurante">
              @include('inner/profile/partials/restaurant')
          </div>
          <div class="ui bottom attached tab segment" data-tab="endereco">
            @include('inner/profile/partials/address')
          </div>
          <div class="ui bottom attached tab segment" data-tab="horario">
            @include('inner/profile/partials/disponibility')
          </div>
          <div class="ui bottom attached tab segment active" data-tab="frete">
            @include('inner/profile/partials/freight')
          </div>
      </div>
  </div>
</div>

<div id="alterTypeTax" class="ui modal">
  <div class="header">Redefinir Taxas?</div>
  <div class="content">
    <p>Se você alterar a forma de taxa todas as taxas atuais serão apagadas!</p>
    <p>Deseja realmente alterar a forma de taxa?</p>
  </div>
  <div class="actions">
    <div class="ui deny button green">Cancelar</div>
    <div class="ui approve button red">Redefinir taxas</div>
  </div>
</div>

@endsection

@section('js')
  <script>
    $('.adicionar-endereco.modal').modal('attach events', '.btn-adicionar-endereco.button', 'show');
    // $('.adicionar-horario.modal').modal('attach events', '.btn-adicionar-horario.button', 'show');

    const name = document.querySelector('#name')
    const slug = document.querySelector('#slug')
    const description = document.querySelector('#description')
    const counter = document.querySelector('#counter')

    const taxDistance = document.querySelector('#taxDistance')
    const taxTime = document.querySelector('#taxTime')
    const taxValue = document.querySelector('#taxValue')
    const taxAdd = document.querySelector('#taxAdd')
    // const taxTable = document.querySelector('#taxTable tbody')

    const cep = document.querySelector('#cep')
    const address = document.querySelector('#address')
    const number = document.querySelector('#number')
    const neigborhood = document.querySelector('#neigborhood')
    const city = document.querySelector('#city')
    const state = document.querySelector('#state')

    const contentFormTax = document.querySelector('#contentFormTax')

    $('.ui.radio.checkbox.typeDelivery').checkbox({
      closable: false,
      onChange: () => openQuestionChangeTypeTax()
    })

    $('.ui.toggle.checkbox').checkbox()

    function openQuestionChangeTypeTax() {
      $('#alterTypeTax').modal({
        onApprove: () => {
          setTypeTax()
          console.log(getTypeDeliveryValue())
        },
        onDeny: () => {
          const inputs = document.querySelectorAll('input[name="typeDelivery"]')

          if (getTypeDeliveryValue() === 'km') {
            inputs[1].checked = true
          } else {
            inputs[0].checked = true
          }
        }
      }).modal('show')
      return true
    }

    async function setTypeTax() {
      try {
            const system = await $.ajax({
              method: 'PUT',
              url: '{{route('profile.taxdelivery.type.update')}}',
              data: {
                typeDelivery: getTypeDeliveryValue(),
                _csrf: '{{ csrfToken }}'
              }
            })

            if (system.success) {
              // taxTable.innerHTML = ''
              if (getTypeDeliveryValue() === 'km') {
                contentFormTax.className = contentFormTax.className.replace('five', 'four')
                if (document.querySelector('#distanceHeader')) {
                  document.querySelector('#fieldCity').style.display = 'none'
                  document.querySelector('#taxDistance').type = 'number'
                  document.querySelector('#distanceLabel').innerText = 'Distância em km.'
                  document.querySelector('#distanceHeader').innerText = 'Distância'
                }
              } else {
                contentFormTax.className = contentFormTax.className.replace('four', 'five')
                if (document.querySelector('#distanceHeader')) {
                  document.querySelector('#fieldCity').style.display = ''
                  document.querySelector('#taxDistance').type = 'text'
                  document.querySelector('#distanceLabel').innerText = 'Nome do Bairro'
                  document.querySelector('#distanceHeader').innerText = 'Bairro'
                }
              }
              taxDeliveries = []
              renderTax()
            }

          } catch (error) {
            console.error(error)
          }
    }

    document.querySelector('#tabFrete').addEventListener('click', () => {
      document.querySelector('#taxDistance').focus()
    })

    function getTypeDeliveryValue() {
      if (document.querySelector('.ui.radio.checkbox.typeDelivery.checked input')) {
        return document.querySelector('.ui.radio.checkbox.typeDelivery.checked input').value
      }
      return '{{ profile.typeDelivery }}'
    }

    cep.addEventListener('input', async () => {
      if (cep.value.length === 9) {
        try {
          const viacep = await $.get('https://viacep.com.br/ws/'+ cep.value +'/json/')
          if (viacep.cep) {
            number.focus()
            address.value = viacep.logradouro
            neigborhood.value = viacep.bairro
            city.value = viacep.localidade
            state.value = viacep.uf
          }

        } catch (error) {
          console.error(error)
        }

      }
    })

    description.addEventListener('input', () => {
      counter.innerHTML = description.value.length
    })

    description.addEventListener('loaded', () => {
      counter.innerHTML = description.value.length
    })

    name.addEventListener('input', () => {
      slug.value = name.value.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f \ ]/g, "")
    })

    slug.addEventListener('input', () => {
      slug.value = slug.value.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f \ ]/g, "").replace(/[^a-z0-9]/gi,'')
    })

    // $('#taxTime').mask('#00:00', {
    //   reverse: true
    // })

    document.querySelector('.btn-editar-endereco').onclick = () => $('.editar-endereco').modal('show')

    taxAdd.addEventListener('click', async (btn) => {
      taxAdd.disabled = true
      taxAdd.name = taxAdd.className.replace('button', 'loading button')
      try {
        const newTaxInfo = {
          distance: taxDistance.value,
          time: taxTime.value,
          value: taxValue.value ? parseFloat(taxValue.value) : null,
        }

        if (getTypeDeliveryValue() === 'neighborhood') {
          newTaxInfo.city = document.querySelector('#taxCity').value
        }

        const api = await $.post('{{route('profile.taxdelivery.add')}}',{
          ...newTaxInfo,
          _csrf: '{{csrfToken}}'
        })

        if (api.success) {
          taxAdd.removeAttribute('disabled')
          location.href = location.origin + '/dashboard/profile?tab=frete'
          /*
          const tr = document.createElement('tr')
          const td1 = document.createElement('td')
          const td2 = document.createElement('td')
          const td3 = document.createElement('td')
          const td4 = document.createElement('td')
          const button = document.createElement('button')

          button.className = 'ui button taxdel'
          button.dataset.code = getTypeDeliveryValue() === 'km' ? api.tax.code + 'km' : api.tax.neighborhoods[0].code
          button.innerText = 'Excluir'

          td1.innerText = getTypeDeliveryValue() === 'km' ? api.tax.distance + 'km' : api.tax.neighborhoods[0].name + ' - ' + api.tax.city
          td2.innerText = getTypeDeliveryValue() === 'km' ? api.tax.time : api.tax.neighborhoods[0].time

          const newVal = getTypeDeliveryValue() === 'km' ? api.tax.value : api.tax.neighborhoods[0].value

          td3.innerText = new Intl.NumberFormat('pt-BR', {currency: 'BRL', style: 'currency'}).format(newVal)

          if (newVal === null) {
            td3.innerText = 'A Consultar'
          }

          if (newVal === 0) {
            td3.innerText = 'Grátis'
          }

          td4.appendChild(button)

          tr.appendChild(td1)
          tr.appendChild(td2)
          tr.appendChild(td3)
          tr.appendChild(td4)

          // taxTable.appendChild(tr)
          taxTable.prepend(tr)
          taxSetActionDel()

          taxDistance.value = ''
          taxTime.value = ''
          taxValue.value = ''

          taxAdd.removeAttribute('disabled')
          taxAdd.className = taxAdd.className.replace(' loading', '')
          taxDistance.focus()
          */
        }

      } catch (error) {
        console.error(error)
        taxAdd.removeAttribute('disabled')
        // alert(error.message)
      }
    })

    taxSetActionDel()

    function taxSetActionDel() {
      document.querySelectorAll('.taxdel').forEach(btn => {
        btn.onclick = async () => {
          try {
            const api = await $.ajax({
              method: 'DELETE',
              url: 'profile/taxDelivery/'+ btn.dataset.code +'/delete',
              data: {_csrf: '{{csrfToken}}'}
            })

            if (api.success) {
              btn.parentElement.parentElement.remove()
            }
          } catch (error) {
            console.error(error)
          }
        }
      })
    }
  </script>
{{--
  <script type="text/babel">
    class Restaurant extends React.Component {
      render() {
        return (
          <div class="ui list large">
            <div class="item"><b>Segunda:</b> Das 12:00 às 20:00</div>
            <div class="item"><b>Terça:</b> Das 12:00 às 20:00</div>
            <div class="item"><b>Quarta:</b> Das 12:00 às 20:00</div>
            <div class="item"><b>Quinta:</b> Das 12:00 às 20:00</div>
            <div class="item"><b>Sexta:</b> Das 12:00 às 20:00</div>
            <div class="item"><b>Sábado:</b> Das 12:00 às 20:00</div>
            <div class="item"><b>Domingo:</b> Das 12:00 às 20:00</div>
          </div>
        )
      }
    }
    ReactDOM.render(<Restaurant />, document.querySelector('#hours'))
  </script>
    --}}
@endsection
