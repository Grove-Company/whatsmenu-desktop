@layout('inner/layout')
@section('content')
<a class="ui button blue botLEFT hide-for-large">Menu</a>
@if(!showMessage())
  @include('inner/updatemessage')
@endif
<div id="requests-content" style="margin: 24px auto;">
  <div class="ui nine cards" style="width: 98%; margin: 5px 0 10px 8px; ">
    <div class="ui card" style="padding: 10px; width: 120px;">
      <div class="content">
        <div class="placeholder">
          <div class="paragraph">
            <div class="line"></div>
          </div>
        </div>
      </div>
    </div>
    <div class="ui card" style="padding: 10px; width: 120px;">
      <div class="content">
        <div class="placeholder">
          <div class="line"></div>
        </div>
      </div>
    </div>
  </div>
  <div class="ui divider"></div>
  <div class="ui fluid placeholder" style="width: 20%; margin: 50px 0 0 15px; border-radius: 5px;  ">
    <div class="header" style="padding: 10px;">
      {{--  <div class="very short line"></div>  --}}
    </div>
  </div>
  <div class="ui fluid placeholder" style="width: 98%; margin: 20px 0 0 15px; border-radius: 5px">
    <div class="header" style="padding: 50px"></div>
  </div>
  <div class="ui fluid placeholder" style="width: 98%; margin: 20px 0 0 15px; border-radius: 5px">
    <div class="header" style="padding: 30px"></div>
  </div>

</div>

<div style="box-shadow: none; min-height: 75vh" class="ui pedido longer modal">
  <i class="close icon"></i>
  <div class="scrolling content" style="min-height: 75vh">
    @include('inner/modals/partials/ticket')
    @include('inner/modals/partials/ticket2')
  </div>
  <div class="actions">
    <span style="float:left" id="cancelButton">
      <button id="printTicket" class="ui label red large">Cancelar</button>
    </span>

    <button id="alterDate" style="display: none" class="ui black button">ALTERAR DATA</button>
    <button id="printTicket" class="ui black basic button">IMPRIMIR</button>
  </div>
</div>

<div class="ui ticket modal">
  <div style="width: 100vw" id="ticketModal" class="content">
    @include('inner/modals/partials/ticket')
  </div>
</div>

<audio id="playAudio">
  <source src="{{assetsUrl('pedido.mp3')}}"/>
</audio>

<style>
  body > div.ui.dimmer.modals.page.transition.visible.active > div.ui.ticket.modal.transition.visible.active.scrolling {
    display: block !important;
    left: 0;
    top: 0;
    margin: 0;
    box-shadow: none !important;
  }
</style>

<script type="text/babel" defer src="/react/components/modals/ModalFees.jsx"></script>
<script type="text/babel" defer src="/react/components/modals/ModalFormsPayment.jsx"></script>
<script type="text/babel" src="/react/requestsTable.jsx?v=2"></script>

@endsection

@section('js')

{{--  CONEXAO WS  --}}

<script>
  var isProductionValue = {{isProduction()}}
  // connect()
  // function connect() {

  //   @if(isProduction())
  //     const ws = adonis.Ws('wss://rt.whatsmenu.com.br').connect()
  //   @else
  //     const ws = adonis.Ws().connect()
  //   @endif

  //   ws.on('open', () => {
  //       console.log('realtime connected!')
  //       const client = ws.subscribe('request:{{ profile.slug }}')
  //       const command = ws.subscribe('command:{{ profile.slug }}')
  //       console.log(command)
  //       client.on('ready', () => console.log('cliente conectado!'))

  //       //Pegando comanda assim que for criada
  //       command.on('command:{{ profile.slug }}', (command) => {
  //         wsCommand = command[0]
  //         commandRefresh = true
  //       })
  //       //=======

  //       client.on('request:{{ profile.slug }}', (request) => {
  //         request = JSON.parse(normalizeCaracteres(JSON.stringify(request)))
  //         console.log(request);
  //         if (request && request[0].profileId === profile.id){
  //           request.forEach(r => {
  //             const index = requests.findIndex(req => req.id === r.id)
  //             console.log(r);
  //             if (index > -1) {
  //               console.log('enviar confirmação');
  //               if (requests[index].print && !r.print) {
  //                 r.print = true;

  //                 (async () => $.ajax({
  //                   method: 'PATCH',
  //                   url: '/dashboard/request/'+ r.id +'/print/confirm',
  //                   data: {_csrf: localStorage.csrf}
  //                 }))();
  //               } else {
  //                 window.requestPrint = r
  //                 printQueue()
  //               }

  //             } else {
  //               console.log('imprimir');
  //               requests.unshift(r)
  //               // forceReRender()
  //               window.requestPrint = r
  //               printQueue()
  //               // this.playSound()
  //             }
  //           })

  //           if (request.cupomId) {
  //             $(tr.querySelector('.cupomPop')).popup({
  //               title: 'Cupom',
  //               content: request.cupom.code
  //             })
  //           }
  //           if (request[0].typeDelivery === 2) {
  //             tablesRefresh = true
  //           }
  //           addEventOpenNewRequestModal()

  //         }
  //       })


  //     })
  // }
</script>

  <script>
    localStorage.token = '{{csrfToken}}'
    localStorage.printCopies = {{profile.options.print.copies}}
    localStorage.printWidth = '{{profile.options.print.width}}'
    // const requests = [];
    // playSound()

    // (async () => {
    //   const myRequests = await $.get('{{route('request.myRequests')}}')
    //   // console.table(myRequests)
    //   if (myRequests) {
    //     requests.push(...myRequests)
    //     // renderRequestList()
    //   }
    // })();

    if (sessionStorage.messageRead) {
      $('.message').transition('fade')
    }

    $('.message .close').on('click', function() {
      $(this).closest('.message').transition('fade')
      sessionStorage.messageRead = 1
    })

    document.querySelectorAll('.cupomPop').forEach(item => {
      $(item).popup({
        title: 'Cupom',
        content: item.dataset.cupom
      })
    })

    // setInterval(async () => {
    //   requests = [... JSON.parse(localStorage.requests)];
    //   const req = requests.shift();
    //   localStorage.requests = JSON.stringify(requests);

    //   if (req) {
    //     loadNewRequest(req);
    //     await playSound();
    //     setTimeout(() => {
    //       printPage();
    //     }, 3214);
    //   }
    // }, 3300);

    const placeholders = {};

    (async () => {
      const profile = await $.get('{{route('myProfile')}}')

      placeholders.statusProduction = profile.options.placeholders.statusProduction
      placeholders.statusSend = profile.options.placeholders.statusSend
      placeholders.statusToRemove = profile.options.placeholders.statusToRemove
    })();


    function hideThead() {
      document.querySelectorAll('thead.hide-for-small-only').forEach(item => {
          if (window.innerWidth < 768) {
            item.style.cssText = 'display: none !important'
          } else {
            item.style.cssText = ''
          }
        })
      }

      hideThead()

      window.addEventListener('resize', () => hideThead());

    //   @if(isProduction())
    //  const ws = adonis.Ws('wss://adm.whatsmenu.com.br').connect()
    //   @else
    //     const ws = adonis.Ws().connect()
    //   @endif
    // ws.on('open', () => {
    //     console.log('realtime connected!')
    //     const client = ws.subscribe('request:{{profile.slug}}')

    //     client.on('ready', () => console.log('cliente conectado!'))

    //     function cupomValue(item) {
    //       let value = 0

    //       if (item.cupom) {
    //         if (item.cupom.type === 'value') {
    //           value = item.cupom.value
    //         } else if (item.cupom.type === 'percent') {
    //           value = item.total * item.cupom.value / 100
    //         }
    //       }

    //       return value
    //     }

    //     client.on('request:{{profile.slug}}', (request) => {
    //       request = JSON.parse(normalizeCaracteres(JSON.stringify(request)))
    //       if (request && request[0].profileId === {{profile.id}}){
    //         console.log(request)
    //         console.log('oi')
    //         request.forEach(r => {
    //           const index = requests.findIndex(req => req.id === r.id)

    //           if (index > -1) {
    //             if (requests[index].print && !r.print) {
    //               r.print = true;

    //               (async () => $.ajax({
    //                   method: 'PATCH',
    //                   url: '/dashboard/request/'+ r.id +'/print/confirm',
    //                   data: {_csrf: localStorage.csrf}
    //                 }))();
    //             }

    //             // requests[index] = r
    //           } else {
    //             requests.unshift(r)
    //           }
    //         })
    //         saveRequest(requests)

    //         if (request.cupomId) {
    //           $(tr.querySelector('.cupomPop')).popup({
    //             title: 'Cupom',
    //             content: request.cupom.code
    //           })
    //         }

    //         addEventOpenNewRequestModal()

    //       }

    //     })

    //   })

      async function playSound() {
        try {

          const audio = document.querySelector('#playAudio')
          await audio.pause();
          audio.currentTime = 0;
          await audio.play();
          $('body').transition('shake');

        } catch (error) {
          console.error(error)
        }
      }
  </script>

  <script type="text/babel">
    function addEventCancelUncancelClick() {
      document.querySelectorAll('.actionCancel, .actionUncancel').forEach(btn => {
        // console.log(btn)
        btn.onclick = async () => {
            const update = await $.ajax({
               method: 'PATCH',
               url: '{{route('request.update.status')}}',
               data: {_csrf: '{{csrfToken}}', id: btn.dataset.id, status: btn.dataset.status === 'null' ? null : btn.dataset.status}
            })

            if (update.success) {
              window.location.reload()
            }
        }
      })
    }

  </script>

  @if(profile.options.print.textOnly)
    <script type="text/babel" src="/react/request-text-only.jsx?v=3.5">
  @else
    <script type="text/babel" src="/react/request.jsx?v=3.5">
  @endif

  </script>


</script>

  @if(!auth.user.controls.firstAccess)
  <script>
    // console.log(auth);
    fbq('track', 'CompleteRegistration');
    // fbq('track', 'Subscribe', {value: '49.90', currency: 'BRL', predicted_ltv: '47.90'});

    (async () => {
        $.ajax({
        method: 'PATCH',
        url: '{{route('user.set.firstAccess')}}',
        data: {_csrf: localStorage.csrf}
      })
    })();
  </script>
  @endif
@endsection
