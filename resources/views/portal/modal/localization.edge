<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-fullscreen-sm-down">
      <div class="modal-content">

          <div class="modal-body mb-3">
              <div class="text-end">
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="text-center">
                  <img src="/img/local.webp" alt="">
                  <h2>Buscar minha cidade</h2>
                  <div class="row">
                      <div class="col-md-3">
                      <select class="form-select form-select-lg mb-3" aria-label="Large select example" id="field_estate">
                          <option selected>Estado</option>
                          @each(estate in estates)
                            <option value="{{ estate }}" {{ upper(atualEstate) === estate ? 'selected' : '' }}>{{ estate }}</option>
                          @endeach
                      </select>
                      </div>
                      <div class="col-md-9">
                          <select class="form-select form-select-lg mb-3" aria-label="Large select example" id="field_city">
                              <option selected>Cidade</option>
                              @each(city in allCities)
                                <option value="{{ city }}" {{ atualCity === city ? 'selected' : '' }}>{{ city }}</option>
                              @endeach
                          </select>
                      </div>
                  </div>

              </div>
          </div>

      </div>
  </div>
</div>
<script>
  const fieldCity = document.querySelector('#field_city')
  const fieldEstate = document.querySelector('#field_estate')
  fieldEstate.onchange = async () => {
    try {
      fieldCity.disabled = true
      const req = await fetch('/portal/' + fieldEstate.value.toLowerCase() + '/cities')
      const cities = await req.json()
      let newCities = '<option selected>Cidade</option>'
      for (const city of cities) {
        newCities += '<option value="'+ city +'">'+ city +'</option>'
      }
      fieldCity.innerHTML = newCities
      fieldCity.disabled = false
    } catch (error) {
     console.error(error);
    }
  }

  fieldCity.onchange = () => {
    const loc = normalizeString(fieldCity.value.split(' ').join('-')) + '-' + fieldEstate.value.toLowerCase()
    document.location.pathname = '/portal/' + loc{{ portal === list ? ' + /listagem' : '' }}
  }

  function normalizeString(text) {
      if (text) {
        return text
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '')
          .toLowerCase()
          .trim()
      }
      return text
    }
</script>
