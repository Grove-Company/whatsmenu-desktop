import { DateTime } from "luxon";
import { GetServerSideProps } from "next";
import { Seller, User, UserType } from "next-auth";
import { getSession, useSession } from "next-auth/react";
import { useContext, useDebugValue, useEffect, useState } from "react";
import { Button, Card, Col, Dropdown, DropdownButton, Form, FormControl, FormGroup, InputGroup, ProgressBar, Row, Table } from "react-bootstrap";
import { BsSearch } from "react-icons/bs";
import { Title } from "../../../../components/Partials/title";
import { ReportAdmGraphic } from "../../../../components/Report/AdmGraphic";
import { AppContext } from "../../../../context/app.ctx";
import { Plan } from "../../../../types/plan";
import { apiRoute, currency, normalizeCaracter } from "../../../../utils/wm-functions";

// Generated by https://quicktype.io

export interface Month {
  month: string;
  users: User[];
}

export default function AdmReportRegisters({ sellers }: { sellers: Seller[] }) {

  const { user } = useContext(AppContext);
  const [months, setMonths] = useState<string[]>([]);
  const [allUsers, setAllUsers] = useState<any[]>([]);
  const [infoAllUsers, setInfoAllUsers] = useState<any>();
  const [monthInput, setMonthInput] = useState(DateTime.local().toFormat("yyyy-MM"))
  const [filterClients, setFilterClients] = useState<string>("all")
  const [filterRegister, setFilterRegister] = useState<string>("all");
  const [usedFilter, setUsedFilter] = useState<{ name: string, value: string }>({ name: "Todos", value: "all" });
  const [searchValue, setSearchValue] = useState<string>("");
  const [progress, setProgress] = useState<number>(1);

  useEffect(() => {
    (async () => {
      const progressAdd = (100 / (sellers.length))
      for (const seller of sellers) {
        if (!seller.months) {
          seller.months = [];
          try {
            const { data } = await apiRoute(
              `/administrator-api/financial/seller/${seller.id}`
            );
            seller.months = await data.months;

          } catch (error) {
            console.error(error);
            throw error;
          }
        }
        setProgress((oldProgress) => (oldProgress + progressAdd))

        const newMonths: any[] = Array.from(
          new Set([...sellers.flatMap((s) => s.months).map((m) => m?.month)])
        );
        setMonths(newMonths);

        setAllUsers(
          sellers.flatMap(s => s.months?.filter(m => m.month === monthInput)).flatMap(m => m?.users).filter(el => el)
        );

        setInfoAllUsers((infoUsers: any) => getFlag(allUsers));
      }

      setTimeout(() => {
        setProgress(0);
      }, 1000)
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    const users = sellers.flatMap(s => s.months?.filter(m => m.month === monthInput)).flatMap(m => m?.users).filter(el => el)
    setAllUsers(users);

    setInfoAllUsers(getFlag(users));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [monthInput])

  const filter = (value: string, valueToSearch: string) => {
    return normalizeCaracter(value, "toLowerCase").includes(normalizeCaracter(valueToSearch, "toLocaleLowerCase"));
  }

  useEffect(() => {
    const newUsers = sellers.flatMap(s => s.months?.filter(m => m.month === monthInput)).flatMap(m => m?.users)
    const seller = sellers.find(sl => sl.name === filterClients);
    const newAllUsers = newUsers.reverse().filter(client => {

      if (!client) {
        return
      }

      if (searchValue.trim() !== "") {

        switch (usedFilter.value) {
          case "name":
            return filter(client.name, searchValue);
          case "email":
            return filter(client.email, searchValue);
          case "id":
            return filter(client.id.toString(), searchValue);
          case "date":
            return filter(DateTime.fromSQL(client.invoices[0].updated_at).toFormat("dd-MM-yyyy HH:MM"), searchValue)
          case "all":
            return (filter(client.name, searchValue) || filter(client.email, searchValue) || filter(client.id.toString(), searchValue)) ||
              filter(DateTime.fromSQL(client.invoices[0].updated_at).toFormat("dd-MM-yyyy HH:MM"), searchValue)
        }
      }

      return client
    }).filter(client => {

      if (filterClients === "all" && filterRegister === "all") {
        return true
      }
      if (filterClients === "all" && filterRegister !== "all") {
        return client.controls.serviceStart === JSON.parse(filterRegister)
      }

      if (filterRegister !== "all") {
        return client.sellerId === seller?.id && client.controls.serviceStart === JSON.parse(filterRegister)
      }

      return client.sellerId === seller?.id
    });
    setAllUsers(newAllUsers);

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [searchValue, usedFilter, filterClients, filterRegister]);

  const getFlag = (users: User[] | any[]) => {
    const count = users.length;
    const countMount = users.filter((u) => u.controls.serviceStart).length;
    const countNormal = users.filter((u) => !u.controls.serviceStart).length;
    const countImpressoras = users.filter((u) => u.controls.salePrint).length;
    const countMesas = users.filter((u) =>
      u.plans.some((p: Plan) => p.category === "table" && p.id !== 20)
    ).length;
    const countEncomendas = users.filter((u) =>
      u.plans.some(
        (p: Plan) => p.category === "package" && p.type === "upgrade" && p.id !== 21
      )
    ).length;

    if (count > 300) {
      return {
        flag: "Faixa 5",
        countMount: countMount,
        countNormal: countNormal,
        countTotal: count,
        countImpressoras: countImpressoras,
        countMesas: countMesas,
        countEncomendas: countEncomendas,
        totalImpressoras: countImpressoras * 5,
        totalMesas: countMesas * 6,
        totalEncomendas: countEncomendas,
        totalMount: countMount * 5 + countMount * 6,
        totalNormal: countNormal * 6,
      };
    } else if (count > 199 && count < 300) {
      return {
        flag: "Faixa 4",
        countMount: countMount,
        countNormal: countNormal,
        countTotal: count,
        countImpressoras: countImpressoras,
        countMesas: countMesas,
        countEncomendas: countEncomendas,
        totalImpressoras: countImpressoras * 5,
        totalMesas: countMesas * 5,
        totalEncomendas: countEncomendas,
        totalMount: countMount * 5 + countMount * 5,
        totalNormal: countNormal * 5,
      };
    } else if (count > 99 && count < 200) {
      return {
        flag: "Faixa 3",
        countMount: countMount,
        countNormal: countNormal,
        countTotal: count,
        countImpressoras: countImpressoras,
        countMesas: countMesas,
        countEncomendas: countEncomendas,
        totalImpressoras: countImpressoras * 5,
        totalMesas: countMesas * 4,
        totalEncomendas: countEncomendas,
        totalMount: countMount * 5 + countMount * 4,
        totalNormal: countNormal * 4,
      };
    } else if (count > 79 && count < 100) {
      return {
        flag: "Faixa 2",
        countMount: countMount,
        countNormal: countNormal,
        countTotal: count,
        countImpressoras: countImpressoras,
        countMesas: countMesas,
        countEncomendas: countEncomendas,
        totalImpressoras: countImpressoras * 5,
        totalMesas: countMesas * 3,
        totalEncomendas: countEncomendas,
        totalMount: countMount * 5 + countMount * 3,
        totalNormal: countNormal * 3,
      };
    } else {
      return {
        flag: "Faixa 1",
        countMount: countMount,
        countNormal: countNormal,
        countImpressoras: countImpressoras,
        countMesas: countMesas,
        countEncomendas: countEncomendas,
        countTotal: count,
        totalImpressoras: countImpressoras * 5,
        totalMesas: 0,
        totalEncomendas: countEncomendas,
        totalMount: 0,
        totalNormal: 0,
      };
    }
  };

  return (
    <>
      <Title
        title="ADM"
        componentTitle="Relatório de Cadastros"
        className="mb-4"
        child={["Relatórios", "Relatório Vendedor"]}
      />
      <section>
        <Card>
          <Card.Header>
            <h4>Resumo mês atual</h4>
            <Card.Header />
            <Card.Body>
              <ReportAdmGraphic
                sellers={sellers}
                type="seller"
                period="monthly"
              />
            </Card.Body>
          </Card.Header>
        </Card>
        {
          progress !== 0 ?
            <div className="mb-4">
              <h6>Carregando...</h6>
              <ProgressBar now={progress} id="progressBar-sellers" />
            </div>
            :
            <br />
        }
        <Card>
          <Card.Header>
            <h4>Resumo Anual</h4>
          </Card.Header>
          <Card.Body>
            <ReportAdmGraphic
              sellers={sellers}
              months={months}
              type="seller"
              period="yearly"
            />
          </Card.Body>
        </Card>
        <hr />
        <Form>
          <Form.Label>Data:</Form.Label>
          <Form.Select value={monthInput} onChange={(e) => {
            setMonthInput(e.target.value);
            setFilterClients("all");
            setFilterRegister("all");

          }}>
            {months.map((month, index) => (
              <option key={`${month}-${index}`} value={month}>
                {month}
              </option>
            ))}
          </Form.Select>
        </Form>
        <br />
        <Row>
          {sellers?.map((seller) => {
            const info = getFlag(
              allUsers.filter((u) => u?.sellerId === seller.id)
            );
            return (
              <Col md="3" key={seller.id} className="mt-3">
                <Card className="h-100">
                  <Card.Header>
                    <h4 className="text-center">{seller.name}</h4>
                  </Card.Header>
                  <Card.Body >
                    <p style={{ color: "#AAA" }}>{info.flag}</p>
                    Delivery com cadastro: {info.countMount}
                    <br />
                    Delivery sem cadastro: {info.countNormal}
                    <br />
                    Total: {info.countTotal}
                    <br />
                    Impressoras: {info.countImpressoras}
                    <br />
                    Mesas: {info.countMesas}
                    <br />
                    Encomendas: {info.countEncomendas}
                    <hr />
                    Delivery com cadastro: {currency({ value: info.totalMount, currency: user?.controls?.currency })}
                    <br />
                    Delivery sem cadastro: {currency({ value: info.totalNormal, currency: user?.controls?.currency })}
                    <br />
                    Impressoras: {currency({ value: info.totalImpressoras, currency: user?.controls?.currency })}
                    <br />
                    Mesas: {currency({ value: info.totalMesas, currency: user?.controls?.currency })}
                    <br />
                    Encomendas: {currency({ value: info.totalEncomendas, currency: user?.controls?.currency })}
                    <br />
                    Total:{" "}
                    {currency(
                      {
                        value: info.totalMount +
                          info.totalNormal +
                          info.totalMesas +
                          info.totalEncomendas +
                          info.totalImpressoras,
                        currency: user?.controls?.currency
                      }
                    )}
                  </Card.Body>
                </Card>
              </Col>
            );
          })}
          <Col md="3" className=" mt-3">
            <Card className="h-100">
              <Card.Header>
                <h4>Total</h4>
              </Card.Header>
              <Card.Body>
                Delivery com cadastro: {infoAllUsers?.countMount}
                <br />
                Delivery sem cadastro: {infoAllUsers?.countNormal}
                <br />
                Total: {infoAllUsers?.countTotal}
                <br />
                Impressoras: {infoAllUsers?.countImpressoras}
                <br />
                Mesas: {infoAllUsers?.countMesas}
                <br />
                Encomendas: {infoAllUsers?.countEncomendas}
              </Card.Body>
            </Card>
          </Col>
          <Col sm="12" className="mt-4">
            <Card>
              <Card.Header>
                <Row>
                  <Col>
                    <Row>
                      <Col sm="12" md="8">
                        <h4>Lista de clientes ({allUsers.length}) {progress !== 0 ? "(CARREGANDO)" : ""}</h4>
                      </Col>
                    </Row>
                    <Row className="mt-3">
                      <Col sm="12" className="mt-2 mt-md-0 d-flex justify-content-end">
                        <FormGroup className="flex-grow-1">
                          <Row>
                            <Col sm="12" md="6" className="d-flex align-items-end gap-2">
                              <InputGroup className="flex-grow-1 mt-1 flex-column flex-md-row gap-2 gap-md-0 flex-md-nowrap justify-content-md-end">
                                <div className="d-flex flex-grow-1">
                                  <InputGroup.Text style={{ borderTopRightRadius: 0, borderBottomRightRadius: 0 }}>
                                    <BsSearch />
                                  </InputGroup.Text>
                                  <FormControl
                                    aria-label="Pesquisar"
                                    placeholder="Pesquisar..."
                                    className="menu-profile-search-input w-100 h-100" style={{ borderRadius: 0 }}

                                    onChange={(e) => {
                                      setTimeout(() => {
                                        setSearchValue(e.target.value);
                                      }, 10);
                                    }}
                                  />
                                </div>
                                <DropdownButton
                                  variant="primary"
                                  title={usedFilter.name}
                                  id="input-group-dropdown-4"
                                  align="end"
                                  className="d-md-block"
                                // style={{display: window.innerWidth < 380 ? "block" : "inline-block"}}
                                >
                                  {[
                                    { name: "Todos", value: "all" },
                                    { name: "Id", value: "id" },
                                    { name: "Email", value: "email" },
                                    { name: "Nome", value: "name" },
                                    { name: "Data", value: "date" },
                                  ].map((mapFilter) => (
                                    <Dropdown.Item
                                      key={mapFilter.value}
                                      href="#"
                                      onClick={(e: any) => {
                                        setUsedFilter(mapFilter);
                                      }}
                                    >
                                      {mapFilter.name}
                                    </Dropdown.Item>
                                  ))}
                                </DropdownButton>
                              </InputGroup>
                            </Col>
                            <Col sm="12" md="3" className="mt-2 mt-md-0">
                              <Form.Label>Vendedor: </Form.Label>
                              <Form.Select
                                value={filterClients}
                                onChange={(e) => {
                                  setFilterClients(e.target.value)
                                }}

                              >
                                <option value="all">Todos</option>
                                {
                                  sellers.map(seller => {
                                    if (seller.status) {
                                      return <option key={seller.name} value={seller.name}>{seller.name}</option>
                                    }
                                  })
                                }
                              </Form.Select>
                            </Col>
                            <Col sm="12" md="3" className="mt-2 mt-md-0">
                              <div>
                                <Form.Label>Com Cadastro: </Form.Label>
                                <Form.Select
                                  value={filterRegister}
                                  onChange={(e) => {
                                    setFilterRegister(e.target.value)
                                  }}

                                >
                                  <option value="all">Todos</option>
                                  {
                                    ["Sim", "Não"].map(el => {
                                      return <option key={el} value={el === "Sim" ? "true" : "false"}>{el}</option>
                                    })
                                  }
                                </Form.Select>
                              </div>
                            </Col>
                          </Row>
                        </FormGroup>
                      </Col>
                    </Row>
                  </Col>
                </Row>
              </Card.Header>
              <Card.Body className="overflow-auto" style={{ maxHeight: "28rem" }}>
                <Table responsive striped hover>
                  <thead>
                    <tr className="fs-7">
                      <th>#</th>
                      <th>id</th>
                      <th>Nome</th>
                      <th>Email</th>
                      <th>Cadastro</th>
                      <th>Vendedor</th>
                      <th>Data Baixa</th>
                    </tr>
                  </thead>
                  <tbody>
                    {
                      allUsers.length > 0 ?
                        allUsers.reverse().map((u: UserType | undefined, index) => {
                          if (u) {
                            return (
                              <tr key={u.id} className="fs-7">
                                <td>{index + 1}</td>
                                <td>{u.id}</td>
                                <td>{u.name}</td>
                                <td>{u.email || "-"}</td>
                                <td>{u.controls?.serviceStart ? "SIM" : "NÃO"}</td>
                                <td>{sellers.find(s => s.id === u.sellerId)?.name ?? "-"}</td>
                                <td>{u.invoices?.length && u.invoices[0].status === "paid" ? DateTime.fromSQL(u.invoices[0].updated_at).toFormat("dd-MM-yyyy HH:MM") : "Pendente"}</td>
                              </tr>
                            )
                          }
                        })
                        :
                        <tr>
                          <td colSpan={7}>{filterClients !== "all" ? "Nenhum cliente encontrado para este vendedor" : "Nenhum cliente para mostrar"}</td>
                        </tr>
                    }
                  </tbody>
                </Table>
              </Card.Body>
            </Card>
          </Col>
        </Row>

      </section>

    </>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const session = await getSession({ req });
  let sellers = [];
  try {
    const { data } = await apiRoute("/adm/seller/list", session, "GET", {
      status: true,
    });
    sellers = data;
  } catch (error) {
    console.error(error);
    return {
      redirect: {
      destination: "/adm/client",
      permanent: false,
      },
    };
   
  }

  return {
    props: { sellers },
  };
};
